string = '''
46) Как и зачем избавляться от if [3500] (NEW 04.23)(недоступно)

45) Как правильно думать над моделью данных [2500] (04.23)(недоступно)

44) Как правильно готовить юнит-тесты [1000] (03.23)(недоступно)

43) Как справляться с краевыми случаями [2000] (03.23)(недоступно)

42) Что делает тесты хорошими [2500] (03.23)(недоступно)

41) Об опасности форматов сериализации [500] (03.23)(недоступно)

40) Сила низкоуровневых подходов [500] (03.23)(недоступно)

39) Формализуем понятие надёжности системы [1000] (03.23)(недоступно)

38) Пишем правильный полиморфный код [3000] (03.23)(недоступно)

37) Логика бьёт порядок [3000] (01.23)(недоступно)

36) Важный инсайт про раздутость кода [500] (01.23)(недоступно)

35) Пишем безошибочный код [4000] (12.22)(недоступно)

34) Полезный хак функционального программирования [1000] (12.22)(недоступно)

33) Избавляемся от зависимости от зависимостей-4 [3000] (11.22)(недоступно)

32) Избавляемся от зависимости от зависимостей-3 [500] (11.22)(недоступно)

31) Изоморфизмы и программирование [2000] (11.22)(недоступно)

30) Формализуем многослойную архитектуру [500] (10.22)(недоступно)

29) Ускоряем код фреймворков в 100 раз [1000] (10.22)(недоступно)

28) Избавляемся от зависимости от зависимостей-2 [2000] (10.22)(недоступно)

27) Как правильно понимать TDD [500] (09.22)(недоступно)

26) Основы ООАП на примере сокобана [4000] (09.22)(недоступно)

25) Как правильно писать тесты [500] (09.22)(недоступно)

24) Избавляемся от зависимости от зависимостей [2000] (09.22)(недоступно)

23) 4 пути, которыми ваши состояния могут стать ошибочными [5555] (08.22)(недоступно)

22) Важные принципы хорошего кода [500] (08.22)(недоступно)

21) 4 универсальных принципа проектирования API [5000] (07.22)(недоступно)

20) Как готовить сверхгибкий код [2500] (06.22)(недоступно)

19) 3 правила простого дизайна [1500] (06.22)(недоступно)

18) Абстракции и гомоморфизм [500] (05.22)(недоступно)

17) Что такое баг? [1000] (05.22)(недоступно)

16) Что такое абстракция? [3500] (05.22)(недоступно)

15) Снижение сложности кода как метод проектирования [1000] (03.22)(недоступно)

14) Паттерн Visitor в ООП и ФП [500] (02.22)(недоступно)

13) Всё что вы знаете об ООП, неверно :) [500] (01.22)(недоступно)

12) Смысл и моделирование данных в проекте [2500] (12.21)(недоступно)

11) Антипаттерн "Интерфейс компактнее реализации" [555] (11.21)(недоступно)

10) Антипаттерн "Самодокументирующийся код" [1000] (11.21)(недоступно)

9) (!) 3 уровня мышления о программе-3 [3500] (11.21)(недоступно)

8) Как проектировать программы in small: 2 научных подхода [5000] (10.21)(недоступно)

7) (!) 3 уровня мышления о программе-2 [3500] (09.21)(недоступно)

6) (!) 3 уровня мышления о программе [5000] (09.21)(недоступно)

5) 5 советов по повышению качества проектирования [555] (08.21)(недоступно)

4) 7 неочевидных проектных ошибок [700] (07.21)(недоступно)

3) 44 правильных вопроса при разбирательстве с легаси [2000] (07.21)(недоступно)

2) 6 ошибок оптимизации в хорошем коде [555] (07.21)(недоступно)

1) Ката программирования и 20 способов развивать свой мозг [555] (05.21)(недоступно)
'''


import re
pattern = r"\[[0-9]+\]"

matches = [int(i.replace('[', '').replace(']', '')) for i in re.findall(pattern, string)]
print(sum(matches))
